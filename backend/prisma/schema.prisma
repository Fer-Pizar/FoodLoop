generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model categorias {
  id_categoria BigInt      @id @default(autoincrement())
  nombre       String      @db.VarChar(50)
  descripcion  String?
  updated_at   DateTime    @default(now()) @db.Timestamptz(6)
  productos    productos[]
}

model Comercio {
  idComercio    BigInt      @id @default(autoincrement()) @map("id_comercio")
  idUsuario     BigInt      @unique @map("id_usuario") 
  nombreNegocio String      @map("nombre_negocio") @db.VarChar(100)
  telefono      String?     @db.VarChar(20)
  direccion     String?     @db.VarChar(200)
  latitud       Decimal?    @db.Decimal(9, 6)
  longitud      Decimal?    @db.Decimal(9, 6)
  categoria     String?     @db.VarChar(50)
  fechaRegistro DateTime    @default(now()) @map("fecha_registro") @db.Timestamptz(6)
  estado        Boolean     @default(true)
  updatedAt     DateTime    @default(now()) @map("updated_at") @db.Timestamptz(6)
  usuario       Usuario     @relation(fields: [idUsuario], references: [idUsuario], onDelete: Cascade, onUpdate: NoAction)
  productos     productos[]

  @@index([idUsuario], map: "idx_comercios_id_usuario")
  @@map("comercios")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model notificaciones {
  id_notificacion BigInt   @id @default(autoincrement())
  id_usuario      BigInt
  titulo          String?  @db.VarChar(100)
  mensaje         String?
  tipo            String?  @db.VarChar(20)
  fecha_envio     DateTime @default(now()) @db.Timestamptz(6)
  leido           Boolean  @default(false)
  updated_at      DateTime @default(now()) @db.Timestamptz(6)
  usuario         Usuario  @relation(fields: [id_usuario], references: [idUsuario], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model productos {
  id_producto         BigInt     @id @default(autoincrement())
  id_comercio         BigInt
  id_categoria        BigInt
  nombre              String     @db.VarChar(100)
  descripcion         String?
  precio_base         Decimal    @db.Decimal(10, 2)
  precio_actual       Decimal?   @db.Decimal(10, 2)
  fecha_vencimiento   DateTime?  @db.Date
  cantidad_disponible Int?
  imagen_url          String?
  fecha_publicacion   DateTime   @default(now()) @db.Timestamptz(6)
  estado              Boolean    @default(true)
  updated_at          DateTime   @default(now()) @db.Timestamptz(6)
  categorias          categorias @relation(fields: [id_categoria], references: [id_categoria], onDelete: NoAction, onUpdate: NoAction)
  comercio            Comercio   @relation(fields: [id_comercio], references: [idComercio], onDelete: Cascade, onUpdate: NoAction)
  reservas            reservas[]

  @@index([estado, fecha_publicacion(sort: Desc)], map: "idx_productos_estado_fecha_pub")
  @@index([fecha_vencimiento], map: "idx_productos_fecha_venc")
  @@index([id_categoria], map: "idx_productos_id_categoria")
  @@index([id_comercio], map: "idx_productos_id_comercio")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reservas {
  id_reserva            BigInt         @id @default(autoincrement())
  id_usuario            BigInt
  id_producto           BigInt
  cantidad              Int
  total                 Decimal        @db.Decimal(10, 2)
  codigo_validacion     String         @unique @db.VarChar(12)
  estado                reserva_estado @default(pendiente)
  fecha_reserva         DateTime       @default(now()) @db.Timestamptz(6)
  ventana_retiro_inicio DateTime?      @db.Timestamptz(6)
  ventana_retiro_fin    DateTime?      @db.Timestamptz(6)
  updated_at            DateTime       @default(now()) @db.Timestamptz(6)
  producto              productos      @relation(fields: [id_producto], references: [id_producto], onDelete: Cascade, onUpdate: NoAction)
  usuario               Usuario        @relation(fields: [id_usuario], references: [idUsuario], onDelete: Cascade, onUpdate: NoAction)

  @@index([id_producto], map: "idx_reservas_id_producto")
  @@index([id_usuario], map: "idx_reservas_id_usuario")
}

model Usuario {
  idUsuario       BigInt           @id @default(autoincrement()) @map("id_usuario")
  nombre          String           @db.VarChar(100)
  email           String           @unique @db.VarChar(100)
  contrasenaHash  String           @map("contrasena_hash")
  fechaNacimiento DateTime?        @map("fecha_nacimiento") @db.Date
  fotoPerfil      String?          @map("foto_perfil")
  fechaRegistro   DateTime         @default(now()) @map("fecha_registro") @db.Timestamptz(6)
  estado          Boolean          @default(true)
  updatedAt       DateTime         @default(now()) @map("updated_at") @db.Timestamptz(6)
  rol             String           @default("consumidor") // 'consumidor' | 'comercio' | 'admin'
  comercio        Comercio?
  notificaciones  notificaciones[]
  reservas        reservas[]

  @@map("usuarios")
}

enum reserva_estado {
  pendiente
  confirmada
  cancelada
  entregada
}
